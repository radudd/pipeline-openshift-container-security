#!groovy
podTemplate(
  label: "buildah-signer",
  cloud: "openshift",
  inheritFrom: "maven",
  podRetention: always(),
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "quay.apps.rd.bdmsky.net/development/jenkins-agent:rhel8-root",
      resourceRequestMemory: "512Mi",
      resourceLimitMemory: "1Gi",
      resourceRequestCpu: "0.3",
      resourceLimitCpu: "2",
      privileged: true
    )
  ]
) {

  node('buildah-signer') {
    withCredentials([file(credentialsId: 'gpg-secret', variable: 'GPG_SECRET'), file(credentialsId: 'gpg-trust', variable: 'GPG_TRUST'), string(credentialsId: 'quay-username', variable: 'QUAY_USERNAME'), string(credentialsId: 'quay-password', variable: 'QUAY_PASSWORD')]) {
      
    def mvnCmd = "./mvnw"
    def gpgCmd = "gpg"
    def buildahCmd = "buildah --storage-driver vfs"

    def appName = "hello-world"
    def projectName = "quarkus-hello-world"
    def appDirName = "app/hello-world"

    // S3 credentials for signstore
    def AWS_ACCESS_KEY_ID = credentials("s3-accesskey")
    def AWS_SECRET_ACCESS_KEY = credentials("s3-secretkey")

    // Should be parametrized
    def gpgName = "radudd"
    def gpgId = "radu@example.com"
    def containerRegistry = "quay.apps.rd.bdmsky.net"
    def containerRegistryRepository = "quarkus-hello-world"
    def s3endpint = "s3.noobaa.svc"
    def s3bucket = "signstore"

    stage("Import GPG Keys") {
      echo "Importing GPG Keys"
      
      sh "${gpgCmd} --batch --import ${GPG_SECRET}"
    }

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir("${appDirName}") {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")
      // Set the tag for the development image: version + build number
      def tag  = "${version}-" + currentBuild.number
      // Set image tag
      def imageTag = "${containerRegistry}/${containerRegistryRepository}:${tag}"

      // Using Maven build this file
      stage('Build jar') {
            echo "Building version ${tag}"
            // Execute Maven Build
            sh "${mvnCmd} clean package -DskipTests"
            sh "buildah version"
      }
      /* 
      stage('Running tests') {
            echo "Running Unit Tests"
            // Execute Unit Tests
            sh "${mvnCmd} test" 
      }
      
      // Publish file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        // Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}/repository/releases"
      }
      */

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag Application Image') {
        echo "Building image"
        sh "${buildahCmd} bud --isolation chroot -t ${imageTag} -f Dockerfile ." 
      }

      stage('Push Application Image') {
        echo "Push image to ${containerRegistry}"
        sh "${buildahCmd} login --username=${QUAY_USERNAME} --password=${QUAY_PASSWORD}"
        sh "${buildahCmd} push --tls-verify=false --authfile /tmp/.dockercfg --sign-by ${gpgId} ${imageTag}"
      }

      stage('Push image signature to S3 bucket') {
        echo "Syncing S3 bucket with the signatures"
        sh "s3cmd sync /var/lib/containers/sigstore/ s3://signstore/"
      }

        /*
      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image"
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                openshift.set("image", "dc/${appName}", "${appName}=${ocpDockerRegistry}/${devProject}/${appName}:${devTag}")
                openshift.set("env", "dc/${appName}", "VERSION='${devTag} (tasks-dev)'")
                def dcDev = openshift.selector("dc","${appName}")
                dcDev.rollout().latest()
                def rcDevVersion = dcDev.object().status.latestVersion
                def rcDev = openshift.selector("rc","${appName}-${rcDevVersion}").object()
                echo "Waiting for DEV app to be ready"
                while (rcDev.status.readyReplicas != rcDev.spec.replicas) {
                    sleep 10
                    rcDev = openshift.selector("rc", "${appName}-${rcDevVersion}").object()
                }

          }
        }
      }
      */
    }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
